'''
The @dataclass decorator in Python is used to automatically generate special methods 
like __init__(), __repr__(), __eq__(), and others for classes that are primarily 
used to store data. This decorator is part of the dataclasses module, which was 
introduced in Python 3.7.


class Point:
    def __init__(self, x: float, y: float):
        self.x = x
        self.y = y

    def __repr__(self) -> str:
        return f"Point(x={self.x}, y={self.y})"

    def __eq__(self, other) -> bool:
        if not isinstance(other, Point):
            return NotImplemented
        return self.x == other.x and self.y == other.y

    def distance_to_origin(self) -> float:
        """Calculate the distance from the point to the origin."""
        return (self.x ** 2 + self.y ** 2) ** 0.5
'''

from dataclasses import dataclass

@dataclass
class Point:
    x: float
    y: float

    def distance_to_origin(self) -> float:
        """Calculate the distance from the point to the origin."""
        return (self.x ** 2 + self.y ** 2) ** 0.5

# Example usage:
point1 = Point(3.0, 4.0)
point2 = Point(6.0, 8.0)

print(point1)  # Output: Point(x=3.0, y=4.0)
print(f"Distance to origin: {point1.distance_to_origin()}")  # Output: Distance to origin: 5.0

# Automatically generated equality method
print(point1 == point2)  # Output: False

# Automatically generated __repr__ method
print(repr(point2))  # Output: Point(x=6.0, y=8.0)

